// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgChunk.proto

#ifndef PROTOBUF_MsgChunk_2eproto__INCLUDED
#define PROTOBUF_MsgChunk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace piController {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MsgChunk_2eproto();
void protobuf_AssignDesc_MsgChunk_2eproto();
void protobuf_ShutdownFile_MsgChunk_2eproto();

class MsgChunk;

enum MsgChunk_MsgType {
  MsgChunk_MsgType_MOTOR_CONTRL = 0,
  MsgChunk_MsgType_NORMAL = 1
};
bool MsgChunk_MsgType_IsValid(int value);
const MsgChunk_MsgType MsgChunk_MsgType_MsgType_MIN = MsgChunk_MsgType_MOTOR_CONTRL;
const MsgChunk_MsgType MsgChunk_MsgType_MsgType_MAX = MsgChunk_MsgType_NORMAL;
const int MsgChunk_MsgType_MsgType_ARRAYSIZE = MsgChunk_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgChunk_MsgType_descriptor();
inline const ::std::string& MsgChunk_MsgType_Name(MsgChunk_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgChunk_MsgType_descriptor(), value);
}
inline bool MsgChunk_MsgType_Parse(
    const ::std::string& name, MsgChunk_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgChunk_MsgType>(
    MsgChunk_MsgType_descriptor(), name, value);
}
enum MsgChunk_MotorType {
  MsgChunk_MotorType_DCMotor = 0,
  MsgChunk_MotorType_ServoMotor_HORIZONTAL = 1,
  MsgChunk_MotorType_ServoMotor_VERTICAL = 2
};
bool MsgChunk_MotorType_IsValid(int value);
const MsgChunk_MotorType MsgChunk_MotorType_MotorType_MIN = MsgChunk_MotorType_DCMotor;
const MsgChunk_MotorType MsgChunk_MotorType_MotorType_MAX = MsgChunk_MotorType_ServoMotor_VERTICAL;
const int MsgChunk_MotorType_MotorType_ARRAYSIZE = MsgChunk_MotorType_MotorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgChunk_MotorType_descriptor();
inline const ::std::string& MsgChunk_MotorType_Name(MsgChunk_MotorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgChunk_MotorType_descriptor(), value);
}
inline bool MsgChunk_MotorType_Parse(
    const ::std::string& name, MsgChunk_MotorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgChunk_MotorType>(
    MsgChunk_MotorType_descriptor(), name, value);
}
// ===================================================================

class MsgChunk : public ::google::protobuf::Message {
 public:
  MsgChunk();
  virtual ~MsgChunk();

  MsgChunk(const MsgChunk& from);

  inline MsgChunk& operator=(const MsgChunk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgChunk& default_instance();

  void Swap(MsgChunk* other);

  // implements Message ----------------------------------------------

  inline MsgChunk* New() const { return New(NULL); }

  MsgChunk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgChunk& from);
  void MergeFrom(const MsgChunk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgChunk_MsgType MsgType;
  static const MsgType MOTOR_CONTRL = MsgChunk_MsgType_MOTOR_CONTRL;
  static const MsgType NORMAL = MsgChunk_MsgType_NORMAL;
  static inline bool MsgType_IsValid(int value) {
    return MsgChunk_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    MsgChunk_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    MsgChunk_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    MsgChunk_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return MsgChunk_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return MsgChunk_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return MsgChunk_MsgType_Parse(name, value);
  }

  typedef MsgChunk_MotorType MotorType;
  static const MotorType DCMotor = MsgChunk_MotorType_DCMotor;
  static const MotorType ServoMotor_HORIZONTAL = MsgChunk_MotorType_ServoMotor_HORIZONTAL;
  static const MotorType ServoMotor_VERTICAL = MsgChunk_MotorType_ServoMotor_VERTICAL;
  static inline bool MotorType_IsValid(int value) {
    return MsgChunk_MotorType_IsValid(value);
  }
  static const MotorType MotorType_MIN =
    MsgChunk_MotorType_MotorType_MIN;
  static const MotorType MotorType_MAX =
    MsgChunk_MotorType_MotorType_MAX;
  static const int MotorType_ARRAYSIZE =
    MsgChunk_MotorType_MotorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MotorType_descriptor() {
    return MsgChunk_MotorType_descriptor();
  }
  static inline const ::std::string& MotorType_Name(MotorType value) {
    return MsgChunk_MotorType_Name(value);
  }
  static inline bool MotorType_Parse(const ::std::string& name,
      MotorType* value) {
    return MsgChunk_MotorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .piController.MsgChunk.MsgType msgType = 1;
  bool has_msgtype() const;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  ::piController::MsgChunk_MsgType msgtype() const;
  void set_msgtype(::piController::MsgChunk_MsgType value);

  // optional .piController.MsgChunk.MotorType motorType = 2;
  bool has_motortype() const;
  void clear_motortype();
  static const int kMotorTypeFieldNumber = 2;
  ::piController::MsgChunk_MotorType motortype() const;
  void set_motortype(::piController::MsgChunk_MotorType value);

  // repeated int32 values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  ::google::protobuf::int32 values(int index) const;
  void set_values(int index, ::google::protobuf::int32 value);
  void add_values(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      values() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:piController.MsgChunk)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_motortype();
  inline void clear_has_motortype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  int motortype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > values_;
  friend void  protobuf_AddDesc_MsgChunk_2eproto();
  friend void protobuf_AssignDesc_MsgChunk_2eproto();
  friend void protobuf_ShutdownFile_MsgChunk_2eproto();

  void InitAsDefaultInstance();
  static MsgChunk* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgChunk

// required .piController.MsgChunk.MsgType msgType = 1;
inline bool MsgChunk::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgChunk::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgChunk::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgChunk::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
inline ::piController::MsgChunk_MsgType MsgChunk::msgtype() const {
  // @@protoc_insertion_point(field_get:piController.MsgChunk.msgType)
  return static_cast< ::piController::MsgChunk_MsgType >(msgtype_);
}
inline void MsgChunk::set_msgtype(::piController::MsgChunk_MsgType value) {
  assert(::piController::MsgChunk_MsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:piController.MsgChunk.msgType)
}

// optional .piController.MsgChunk.MotorType motorType = 2;
inline bool MsgChunk::has_motortype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgChunk::set_has_motortype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgChunk::clear_has_motortype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgChunk::clear_motortype() {
  motortype_ = 0;
  clear_has_motortype();
}
inline ::piController::MsgChunk_MotorType MsgChunk::motortype() const {
  // @@protoc_insertion_point(field_get:piController.MsgChunk.motorType)
  return static_cast< ::piController::MsgChunk_MotorType >(motortype_);
}
inline void MsgChunk::set_motortype(::piController::MsgChunk_MotorType value) {
  assert(::piController::MsgChunk_MotorType_IsValid(value));
  set_has_motortype();
  motortype_ = value;
  // @@protoc_insertion_point(field_set:piController.MsgChunk.motorType)
}

// repeated int32 values = 3;
inline int MsgChunk::values_size() const {
  return values_.size();
}
inline void MsgChunk::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int32 MsgChunk::values(int index) const {
  // @@protoc_insertion_point(field_get:piController.MsgChunk.values)
  return values_.Get(index);
}
inline void MsgChunk::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:piController.MsgChunk.values)
}
inline void MsgChunk::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:piController.MsgChunk.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgChunk::values() const {
  // @@protoc_insertion_point(field_list:piController.MsgChunk.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgChunk::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:piController.MsgChunk.values)
  return &values_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace piController

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::piController::MsgChunk_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::piController::MsgChunk_MsgType>() {
  return ::piController::MsgChunk_MsgType_descriptor();
}
template <> struct is_proto_enum< ::piController::MsgChunk_MotorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::piController::MsgChunk_MotorType>() {
  return ::piController::MsgChunk_MotorType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MsgChunk_2eproto__INCLUDED
