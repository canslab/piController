// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgChunk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgChunk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace piController {

namespace {

const ::google::protobuf::Descriptor* MsgChunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChunk_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgChunk_MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgChunk_MotorType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgChunk_2eproto() {
  protobuf_AddDesc_MsgChunk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgChunk.proto");
  GOOGLE_CHECK(file != NULL);
  MsgChunk_descriptor_ = file->message_type(0);
  static const int MsgChunk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChunk, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChunk, motortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChunk, values_),
  };
  MsgChunk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgChunk_descriptor_,
      MsgChunk::default_instance_,
      MsgChunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChunk, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgChunk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChunk, _internal_metadata_),
      -1);
  MsgChunk_MsgType_descriptor_ = MsgChunk_descriptor_->enum_type(0);
  MsgChunk_MotorType_descriptor_ = MsgChunk_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgChunk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgChunk_descriptor_, &MsgChunk::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgChunk_2eproto() {
  delete MsgChunk::default_instance_;
  delete MsgChunk_reflection_;
}

void protobuf_AddDesc_MsgChunk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016MsgChunk.proto\022\014piController\"\367\001\n\010MsgCh"
    "unk\022/\n\007msgType\030\001 \002(\0162\036.piController.MsgC"
    "hunk.MsgType\0223\n\tmotorType\030\002 \001(\0162 .piCont"
    "roller.MsgChunk.MotorType\022\016\n\006values\030\003 \003("
    "\005\"\'\n\007MsgType\022\020\n\014MOTOR_CONTRL\020\000\022\n\n\006NORMAL"
    "\020\001\"L\n\tMotorType\022\013\n\007DCMotor\020\000\022\031\n\025ServoMot"
    "or_HORIZONTAL\020\001\022\027\n\023ServoMotor_VERTICAL\020\002", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgChunk.proto", &protobuf_RegisterTypes);
  MsgChunk::default_instance_ = new MsgChunk();
  MsgChunk::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgChunk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgChunk_2eproto {
  StaticDescriptorInitializer_MsgChunk_2eproto() {
    protobuf_AddDesc_MsgChunk_2eproto();
  }
} static_descriptor_initializer_MsgChunk_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgChunk_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChunk_MsgType_descriptor_;
}
bool MsgChunk_MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MsgChunk_MsgType MsgChunk::MOTOR_CONTRL;
const MsgChunk_MsgType MsgChunk::NORMAL;
const MsgChunk_MsgType MsgChunk::MsgType_MIN;
const MsgChunk_MsgType MsgChunk::MsgType_MAX;
const int MsgChunk::MsgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MsgChunk_MotorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChunk_MotorType_descriptor_;
}
bool MsgChunk_MotorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MsgChunk_MotorType MsgChunk::DCMotor;
const MsgChunk_MotorType MsgChunk::ServoMotor_HORIZONTAL;
const MsgChunk_MotorType MsgChunk::ServoMotor_VERTICAL;
const MsgChunk_MotorType MsgChunk::MotorType_MIN;
const MsgChunk_MotorType MsgChunk::MotorType_MAX;
const int MsgChunk::MotorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgChunk::kMsgTypeFieldNumber;
const int MsgChunk::kMotorTypeFieldNumber;
const int MsgChunk::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgChunk::MsgChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:piController.MsgChunk)
}

void MsgChunk::InitAsDefaultInstance() {
}

MsgChunk::MsgChunk(const MsgChunk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:piController.MsgChunk)
}

void MsgChunk::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 0;
  motortype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChunk::~MsgChunk() {
  // @@protoc_insertion_point(destructor:piController.MsgChunk)
  SharedDtor();
}

void MsgChunk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChunk_descriptor_;
}

const MsgChunk& MsgChunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgChunk_2eproto();
  return *default_instance_;
}

MsgChunk* MsgChunk::default_instance_ = NULL;

MsgChunk* MsgChunk::New(::google::protobuf::Arena* arena) const {
  MsgChunk* n = new MsgChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgChunk::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgChunk*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msgtype_, motortype_);

#undef ZR_HELPER_
#undef ZR_

  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:piController.MsgChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .piController.MsgChunk.MsgType msgType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::piController::MsgChunk_MsgType_IsValid(value)) {
            set_msgtype(static_cast< ::piController::MsgChunk_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_motorType;
        break;
      }

      // optional .piController.MsgChunk.MotorType motorType = 2;
      case 2: {
        if (tag == 16) {
         parse_motorType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::piController::MsgChunk_MotorType_IsValid(value)) {
            set_motortype(static_cast< ::piController::MsgChunk_MotorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_values;
        break;
      }

      // repeated int32 values = 3;
      case 3: {
        if (tag == 24) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_values())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:piController.MsgChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:piController.MsgChunk)
  return false;
#undef DO_
}

void MsgChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:piController.MsgChunk)
  // required .piController.MsgChunk.MsgType msgType = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .piController.MsgChunk.MotorType motorType = 2;
  if (has_motortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->motortype(), output);
  }

  // repeated int32 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:piController.MsgChunk)
}

::google::protobuf::uint8* MsgChunk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:piController.MsgChunk)
  // required .piController.MsgChunk.MsgType msgType = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .piController.MsgChunk.MotorType motorType = 2;
  if (has_motortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->motortype(), target);
  }

  // repeated int32 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:piController.MsgChunk)
  return target;
}

int MsgChunk::ByteSize() const {
  int total_size = 0;

  // required .piController.MsgChunk.MsgType msgType = 1;
  if (has_msgtype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }
  // optional .piController.MsgChunk.MotorType motorType = 2;
  if (has_motortype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motortype());
  }

  // repeated int32 values = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChunk::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgChunk* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgChunk>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChunk::MergeFrom(const MsgChunk& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_motortype()) {
      set_motortype(from.motortype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgChunk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChunk::CopyFrom(const MsgChunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChunk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgChunk::Swap(MsgChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgChunk::InternalSwap(MsgChunk* other) {
  std::swap(msgtype_, other->msgtype_);
  std::swap(motortype_, other->motortype_);
  values_.UnsafeArenaSwap(&other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgChunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChunk_descriptor_;
  metadata.reflection = MsgChunk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgChunk

// required .piController.MsgChunk.MsgType msgType = 1;
bool MsgChunk::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgChunk::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgChunk::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgChunk::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::piController::MsgChunk_MsgType MsgChunk::msgtype() const {
  // @@protoc_insertion_point(field_get:piController.MsgChunk.msgType)
  return static_cast< ::piController::MsgChunk_MsgType >(msgtype_);
}
 void MsgChunk::set_msgtype(::piController::MsgChunk_MsgType value) {
  assert(::piController::MsgChunk_MsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:piController.MsgChunk.msgType)
}

// optional .piController.MsgChunk.MotorType motorType = 2;
bool MsgChunk::has_motortype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgChunk::set_has_motortype() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgChunk::clear_has_motortype() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgChunk::clear_motortype() {
  motortype_ = 0;
  clear_has_motortype();
}
 ::piController::MsgChunk_MotorType MsgChunk::motortype() const {
  // @@protoc_insertion_point(field_get:piController.MsgChunk.motorType)
  return static_cast< ::piController::MsgChunk_MotorType >(motortype_);
}
 void MsgChunk::set_motortype(::piController::MsgChunk_MotorType value) {
  assert(::piController::MsgChunk_MotorType_IsValid(value));
  set_has_motortype();
  motortype_ = value;
  // @@protoc_insertion_point(field_set:piController.MsgChunk.motorType)
}

// repeated int32 values = 3;
int MsgChunk::values_size() const {
  return values_.size();
}
void MsgChunk::clear_values() {
  values_.Clear();
}
 ::google::protobuf::int32 MsgChunk::values(int index) const {
  // @@protoc_insertion_point(field_get:piController.MsgChunk.values)
  return values_.Get(index);
}
 void MsgChunk::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:piController.MsgChunk.values)
}
 void MsgChunk::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:piController.MsgChunk.values)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgChunk::values() const {
  // @@protoc_insertion_point(field_list:piController.MsgChunk.values)
  return values_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgChunk::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:piController.MsgChunk.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace piController

// @@protoc_insertion_point(global_scope)
